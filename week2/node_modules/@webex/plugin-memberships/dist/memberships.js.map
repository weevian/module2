{"version":3,"sources":["memberships.js"],"names":["debug","require","Memberships","SparkPlugin","extend","listen","spark","SDK_EVENT","EXTERNAL","RESOURCE","MEMBERSHIPS","then","envelope","eventEnvelope","internal","mercury","connect","listenTo","INTERNAL","TEAMS_ACTIVITY","event","onWebexApiEvent","activity","data","verb","ACTIVITY_VERB","ADD","membershipCreatedEventData","getMembershipEvent","EVENT_TYPE","CREATED","trigger","LEAVE","membershipDeletedEventData","DELETED","ADD_MODERATOR","REMOVE_MODERATOR","HIDE","membershipUpdatedEventData","UPDATED","ACKNOWLEDGE","membershipSeenEventData","SEEN","sdkEvent","member","space","created","published","actorId","actor","entryUUID","roomId","target","id","roomType","tags","isRoomHidden","object","SPACE_TYPE","DIRECT","roomProperties","isModerator","ACTIVITY_FIELD","ACTOR","TARGET","lastSeenId","OBJECT","personId","personEmail","emailAddress","entryEmail","personDisplayName","displayName","personOrgId","orgId","e","logger","error","message","create","membership","request","method","service","resource","body","res","get","items","list","options","qs","Page","listWithReadStatus","conversation","participantAckFilter","activitiesLimit","resp","roomUUID","particpants","participants","lastReadInfo","myId","me","includes","ACTIVITY_TAG","HIDDEN","i","length","participant","participantInfo","entryEmailAddress","isMonitor","lastSeenActivityUUID","lastSeenDate","lastSeenActivityDate","push","resolve","reject","remove","statusCode","undefined","update","updateLastSeen","acknowledge","ack"],"mappings":"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","file":"memberships.js","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {\n  ensureConvoAvailability,\n  SDK_EVENT,\n  createEventEnvelope,\n  ensureMyIdIsAvailable,\n  buildHydraMembershipId,\n  buildHydraMessageId,\n  buildHydraOrgId,\n  buildHydraPersonId,\n  buildHydraRoomId,\n  getHydraRoomType,\n  deconstructHydraId\n} from '@webex/common';\nimport {SparkPlugin, Page} from '@webex/webex-core';\nimport {cloneDeep} from 'lodash';\n\nconst debug = require('debug')('memberships');\n\n/**\n * @typedef {Object} MembershipObject\n * @property {string} id - Unique identifier for the membership\n * @property {string} roomId - The room ID\n * @property {string} personId - The person ID\n * @property {email} personEmail - The email address of the person / room member\n * @property {boolean} isModerator - Indicates whether the specified person should be a room moderator\n * @property {boolean} isMonitor - Indicates whether the specified member is a room monitor\n * @property {isoDate} created - The date and time that this membership was created\n */\n\n/**\n * Memberships represent a person's relationship to a room. Use this API to list\n * members of any room that you're in or create memberships to invite someone\n * to a room. Memberships can also be updated to make someone a moderator\n * or deleted to remove them from the room.\n * @class\n * @name Memberships\n */\nconst Memberships = SparkPlugin.extend({\n  /**\n   * Connect to the web socket to listen to incoming messages.\n   * @returns {Promise}\n   */\n  listen() {\n    // Create a common envelope that we will wrap all events in\n    return createEventEnvelope(this.spark,\n      SDK_EVENT.EXTERNAL.RESOURCE.MEMBERSHIPS)\n      .then((envelope) => {\n        this.eventEnvelope = envelope;\n\n        // Register to listen to events\n        return this.spark.internal.mercury.connect().then(() => {\n          this.listenTo(this.spark.internal.mercury,\n            SDK_EVENT.INTERNAL.TEAMS_ACTIVITY,\n            (event) => this.onWebexApiEvent(event));\n        });\n      });\n  },\n\n  /**\n   * Trigger a membership related events.\n   * @param {Object} event\n   * @returns {undefined} -- nothing //linter requires return in JSDoc\n   */\n  onWebexApiEvent(event) {\n    const {activity} = event.data;\n\n    /* eslint-disable no-case-declarations */\n    switch (activity.verb) {\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.ADD:\n        const membershipCreatedEventData =\n          this.getMembershipEvent(activity, SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED);\n\n        if (membershipCreatedEventData) {\n          debug(`membership \"created\" payload: \\\n            ${JSON.stringify(membershipCreatedEventData)}`);\n          this.trigger(SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED, membershipCreatedEventData);\n        }\n        break;\n\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.LEAVE:\n        const membershipDeletedEventData =\n          this.getMembershipEvent(activity, SDK_EVENT.EXTERNAL.EVENT_TYPE.DELETED);\n\n        if (membershipDeletedEventData) {\n          debug(`membership \"deleted\" payload: \\\n            ${JSON.stringify(membershipDeletedEventData)}`);\n          this.trigger(SDK_EVENT.EXTERNAL.EVENT_TYPE.DELETED, membershipDeletedEventData);\n        }\n        break;\n\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.ADD_MODERATOR:\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.REMOVE_MODERATOR:\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.HIDE:\n        const membershipUpdatedEventData =\n          this.getMembershipEvent(activity, SDK_EVENT.EXTERNAL.EVENT_TYPE.UPDATED);\n\n        if (membershipUpdatedEventData) {\n          debug(`membership \"updated\" payload: \\\n            ${JSON.stringify(membershipUpdatedEventData)}`);\n          this.trigger(SDK_EVENT.EXTERNAL.EVENT_TYPE.UPDATED, membershipUpdatedEventData);\n        }\n        break;\n\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.ACKNOWLEDGE:\n        const membershipSeenEventData =\n          this.getMembershipEvent(activity, SDK_EVENT.EXTERNAL.EVENT_TYPE.SEEN);\n\n        if (membershipSeenEventData) {\n          debug(`membership \"updated\" payload: \\\n            ${JSON.stringify(membershipSeenEventData)}`);\n          this.trigger(SDK_EVENT.EXTERNAL.EVENT_TYPE.SEEN, membershipSeenEventData);\n        }\n        break;\n\n      default:\n        break;\n    }\n  },\n\n  /**\n   * Constructs the data object for an event on the memberships resource,\n   * adhering to Hydra's Webehook data structure memberships.\n   * @param {Object} activity from mercury\n   * @param {Object} event type of \"webhook\" event\n   * @returns {Object} constructed event\n   */\n  getMembershipEvent(activity, event) {\n    try {\n      const sdkEvent = cloneDeep(this.eventEnvelope);\n      let member;\n      let space;\n\n      sdkEvent.event = event;\n      sdkEvent.data.created = activity.published;\n      sdkEvent.actorId = buildHydraPersonId(activity.actor.entryUUID);\n      if (activity.verb !== SDK_EVENT.INTERNAL.ACTIVITY_VERB.HIDE) {\n        sdkEvent.data.roomId = buildHydraRoomId(activity.target.id);\n        sdkEvent.data.roomType = getHydraRoomType(activity.target.tags);\n        sdkEvent.data.isRoomHidden = false; // any activity unhides a space.\n      }\n      else {\n        sdkEvent.data.roomId = buildHydraRoomId(activity.object.id);\n        sdkEvent.data.roomType = SDK_EVENT.EXTERNAL.SPACE_TYPE.DIRECT;\n        // currently hidden attribute is only set on 1-1\n        sdkEvent.data.isRoomHidden = true;\n      }\n      if (activity.verb !== SDK_EVENT.INTERNAL.ACTIVITY_VERB.ACKNOWLEDGE) {\n        if ((activity.object.roomProperties) && (activity.object.roomProperties.isModerator)) {\n          sdkEvent.data.isModerator = true;\n        }\n        else {\n          sdkEvent.data.isModerator = false;\n        }\n      }\n      // This is deprecated but still sent in the webhooks\n      // We won't send it for our new SDK events\n      // sdkEvent.data.isMonitor = false;\n\n      if (activity.verb === SDK_EVENT.INTERNAL.ACTIVITY_VERB.ACKNOWLEDGE) {\n        // For a read receipt the person is the \"actor\" or the one who did the reading\n        member = SDK_EVENT.INTERNAL.ACTIVITY_FIELD.ACTOR;\n        // The space with the read message is the \"target\"\n        space = SDK_EVENT.INTERNAL.ACTIVITY_FIELD.TARGET;\n        // And the \"object\" is the message that was last seen\n        sdkEvent.data.lastSeenId = buildHydraMessageId(activity.object.id);\n      }\n      else if (activity.verb === SDK_EVENT.INTERNAL.ACTIVITY_VERB.HIDE) {\n        // For a hide activity the person is also the \"actor\"\n        member = SDK_EVENT.INTERNAL.ACTIVITY_FIELD.ACTOR;\n        // But the space is now the \"object\"\n        space = SDK_EVENT.INTERNAL.ACTIVITY_FIELD.OBJECT;\n      }\n      else {\n        // For most memberships events the person is the 'object\"\n        member = SDK_EVENT.INTERNAL.ACTIVITY_FIELD.OBJECT;\n        // and the space is the \"target\"\n        space = SDK_EVENT.INTERNAL.ACTIVITY_FIELD.TARGET;\n      }\n\n      sdkEvent.data.id = buildHydraMembershipId(activity[member].entryUUID,\n        activity[space].id);\n      sdkEvent.data.personId = buildHydraPersonId(activity[member].entryUUID);\n      sdkEvent.data.personEmail =\n        activity[member].emailAddress || activity[member].entryEmail;\n      sdkEvent.data.personDisplayName = activity[member].displayName;\n      sdkEvent.data.personOrgId = buildHydraOrgId(activity[member].orgId);\n\n      return sdkEvent;\n    }\n    catch (e) {\n      this.spark.logger.error(`Unable to generate SDK event from mercury \\\n'socket activity for memberships:${event} event: ${e.message}`);\n\n      return null;\n    }\n  },\n\n\n  /**\n   * Adds a person to a room. The person can be added by ID (`personId`) or by\n   * Email Address (`personEmail`). The person can be optionally added to the room\n   * as a moderator.\n   * @instance\n   * @memberof Memberships\n   * @param {MembershipObject} membership\n   * @returns {Promise<MembershipObject>}\n   * @example\n   * ciscospark.rooms.create({title: 'Create Membership Example'})\n   *   .then(function(room) {\n   *     return ciscospark.memberships.create({\n   *      personEmail: 'alice@example.com',\n   *      roomId: room.id\n   *    });\n   *   })\n   *   .then(function(membership) {\n   *     var assert = require('assert');\n   *     assert(membership.id);\n   *     assert(membership.roomId);\n   *     assert(membership.personId);\n   *     assert(membership.personEmail);\n   *     assert('isModerator' in membership);\n   *     assert('isMonitor' in membership);\n   *     assert(membership.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  create(membership) {\n    return this.request({\n      method: 'POST',\n      service: 'hydra',\n      resource: 'memberships',\n      body: membership\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Returns a single membership.\n   * @instance\n   * @memberof Memberships\n   * @param {MembershipObject|uuid} membership\n   * @returns {Promise<MembershipObject>}\n   * @example\n   * var membership;\n   * ciscospark.rooms.create({title: 'Get Membership Example'})\n   *   .then(function(room) {\n   *     return ciscospark.memberships.create({\n   *       personEmail: 'alice@example.com',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     membership = m;\n   *     return ciscospark.memberships.get(m.id);\n   *   })\n   *   .then(function(m) {\n   *     var assert = require('assert');\n   *     assert.deepEqual(m, membership);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get(membership) {\n    const id = membership.id || membership;\n\n    return this.request({\n      service: 'hydra',\n      resource: `memberships/${id}`\n    })\n      .then((res) => res.body.items || res.body);\n  },\n\n  /**\n   * Returns a list of memberships. In most cases the results will only contain\n   * rooms that the authentiated user is a member of. You can filter the results\n   * by room to list people in a room or by person to find rooms that a\n   * specific person is a member of.\n   * @instance\n   * @memberof Memberships\n   * @param {Object} options\n   * @param {string} options.personId\n   * @param {string} options.personEmail\n   * @param {string} options.roomId\n   * @param {number} options.max\n   * @returns {Promise<Page<MembershipObject>>}\n   * @example\n   * var room;\n   * ciscospark.rooms.create({title: 'List Membership Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return ciscospark.memberships.create({\n   *      personEmail: 'alice@example.com',\n   *      roomId: room.id\n   *     });\n   *   })\n   *   .then(function() {\n   *     return ciscospark.memberships.list({roomId: room.id});\n   *   })\n   *   .then(function(memberships) {\n   *     var assert = require('assert');\n   *     assert.equal(memberships.length, 2);\n   *     for (var i = 0; i < memberships.length; i+= 1) {\n   *       assert.equal(memberships.items[i].roomId, room.id);\n   *     }\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  list(options) {\n    return this.request({\n      service: 'hydra',\n      resource: 'memberships',\n      qs: options\n    })\n      .then((res) => new Page(res, this.spark));\n  },\n\n  /**\n   * Returns a list of memberships with details about the lastSeenId for each\n   * user, allowing a client to indicate \"read status\" in a space GUI\n   *\n   * This differs from the memberships.list() function in the following ways:\n   *  -- it accepts only a room or object with a valid roomId\n   *  -- no other options, eg: max, are considered\n   *  -- results are not paginated\n   *  -- memberships in the return do not include the\n   *     \"created\", \"isRoomHidden\", fields\n   *  -- memberships in the return do include the new\n   *    \"lastSeenId\", and \"lastSeenDate\" fields\n   *     these will not exist if the member has never \"seen\" the space\n   *\n   * In general this function should be used only when the\n   * client needs to access read status info.\n   *\n   * This function may be deprecated when this info is provided in the membership\n   * objects returned in the list function.\n   *\n   *\n   * @instance\n   * @memberof Memberships\n   * @param {Object} options\n   * @param {string} options.roomId\n   * @returns {Promise<MembershipObjectList>}\n   */\n  listWithReadStatus(options) {\n    const conversation = {\n      id: deconstructHydraId(options.roomId).id\n    };\n\n    return ensureMyIdIsAvailable(this.spark)\n      .then(() => ensureConvoAvailability(this.spark)\n        .then(() => this.spark.internal.conversation.get(conversation,\n          {\n            participantAckFilter: 'all', // show lastAck info for each participant\n            activitiesLimit: 0 // don't send the whole history of activity\n          })\n          .then((resp) => {\n            try {\n              // We keep track of the last read message by each user\n              const roomUUID = resp.id;\n              const roomId = buildHydraRoomId(roomUUID);\n              const particpants = resp.participants.items;\n              const lastReadInfo = {items: []};\n              const roomType = getHydraRoomType(resp.tags);\n              const myId = this.spark.internal.me.id;\n              const isRoomHidden = resp.tags.includes(SDK_EVENT.INTERNAL.ACTIVITY_TAG.HIDDEN);\n\n              for (let i = 0; i < particpants.length; i += 1) {\n                const participant = particpants[i];\n                const participantInfo = {\n                  id: buildHydraMembershipId(participant.entryUUID, roomUUID),\n                  roomId,\n                  personId: buildHydraPersonId(participant.entryUUID),\n                  personEmail: participant.entryEmailAddress ||\n                    participant.entryEmail,\n                  personDisplayName: participant.displayName,\n                  personOrgId: buildHydraOrgId(participant.orgId),\n                  isMonitor: false, // deprecated, but included for completeness\n                  roomType\n                  // created is not available in the conversations payload\n                };\n\n                if ((isRoomHidden) && (participantInfo.personId === myId)) {\n                  participantInfo.isRoomHidden = isRoomHidden;\n                }\n\n                if ('roomProperties' in participant) {\n                  if ('lastSeenActivityDate' in participant.roomProperties) {\n                    participantInfo.lastSeenId =\n                      buildHydraMessageId(participant.roomProperties.lastSeenActivityUUID);\n                    participantInfo.lastSeenDate =\n                      participant.roomProperties.lastSeenActivityDate;\n                  }\n                  if ('isModerator' in participant.roomProperties) {\n                    participantInfo.isModerator = participant.roomProperties.isModerator;\n                  }\n                }\n\n                lastReadInfo.items.push(participantInfo);\n              }\n\n              return Promise.resolve(lastReadInfo);\n            }\n            catch (e) {\n              return Promise.reject(e);\n            }\n          })));\n  },\n\n  /**\n   * Deletes a single membership.\n   * @instance\n   * @memberof Memberships\n   * @param {MembershipObject|uuid} membership\n   * @returns {Promise}\n   * @example\n   * var membership, room;\n   * ciscospark.rooms.create({title: 'Remove Membership Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return ciscospark.memberships.create({\n   *      personEmail: 'alice@example.com',\n   *      roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     membership = m;\n   *     return ciscospark.memberships.list({roomId: room.id});\n   *   })\n   *   .then(function(memberships) {\n   *     var assert = require('assert');\n   *     assert.equal(memberships.length, 2);\n   *     return ciscospark.memberships.remove(membership);\n   *   })\n   *   .then(function() {\n   *     return ciscospark.memberships.list({roomId: room.id});\n   *   })\n   *   .then(function(memberships) {\n   *     var assert = require('assert');\n   *     assert.equal(memberships.length, 1);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  remove(membership) {\n    const id = membership.id || membership;\n\n    return this.request({\n      method: 'DELETE',\n      service: 'hydra',\n      resource: `memberships/${id}`\n    })\n      .then((res) => {\n        // Firefox has some issues with 204s and/or DELETE. This should move to\n        // http-core\n        if (res.statusCode === 204) {\n          return undefined;\n        }\n\n        return res.body;\n      });\n  },\n\n  /**\n   * Used to update a single membership's properties\n   * @instance\n   * @memberof Memberships\n   * @param {MembershipObject|uuid} membership\n   * @returns {Promise<MembershipObject>}\n   * @example\n   * var membership, room;\n   * ciscospark.rooms.create({title: 'Memberships Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return ciscospark.memberships.list({roomId: room.id});\n   *   })\n   *   .then(function(memberships) {\n   *     membership = memberships.items[0];\n   *     var assert = require('assert');\n   *     assert.equal(membership.isModerator, false);\n   *     membership.isModerator = true;\n   *     return ciscospark.memberships.update(membership);\n   *   })\n   *   .then(function() {\n   *     return ciscospark.memberships.get(membership.id);\n   *   })\n   *   .then(function(membership) {\n   *     var assert = require('assert');\n   *     assert.equal(membership.isModerator, true);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  update(membership) {\n    const id = membership.id || membership;\n\n    return this.request({\n      method: 'PUT',\n      service: 'hydra',\n      resource: `memberships/${id}`,\n      body: membership\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Updates the lastSeenId attribute of a membership\n   * @instance\n   * @memberof Mememberships\n   * @param {string} message\n   * @returns {Promise<MembershipObject>}\n   */\n  updateLastSeen(message) {\n    const activity = {\n      id: deconstructHydraId(message.id).id\n    };\n    const conversation = {\n      id: deconstructHydraId(message.roomId).id\n    };\n\n    return ensureConvoAvailability(this.spark)\n      .then(() => this.spark.internal.conversation.acknowledge(conversation, activity)\n        .then((ack) => ({\n          lastSeenId: buildHydraMessageId(ack.object.id),\n          id: buildHydraMembershipId(ack.actor.entryUUID,\n            ack.target.id),\n          personId: buildHydraPersonId(ack.actor.entryUUID),\n          personEmail: ack.actor.emailAddress || ack.actor.entryEmail,\n          personDisplayName: ack.actor.displayName,\n          personOrgId: buildHydraOrgId(ack.actor.orgId),\n          roomId: buildHydraRoomId(ack.target.id),\n          roomType: getHydraRoomType(ack.target.tags),\n          isRoomHidden: false, // any activity unhides a space.\n          isMonitor: false, // deprecated, returned for back compat\n          created: ack.object.published\n        })));\n  }\n\n});\n\nexport default Memberships;\n"]}