{"version":3,"sources":["messages.js"],"names":["debug","require","Messages","SparkPlugin","extend","initialize","args","prototype","listen","spark","SDK_EVENT","EXTERNAL","RESOURCE","MESSAGES","then","envelope","eventEnvelope","internal","mercury","connect","listenTo","INTERNAL","TEAMS_ACTIVITY","event","onWebexApiEvent","activity","data","verb","ACTIVITY_VERB","SHARE","POST","createdEvent","getMessageEvent","EVENT_TYPE","CREATED","trigger","DELETE","deletedEvent","DELETED","sdkEvent","created","published","actorId","hydraTypes","PEOPLE","actor","entryUUID","roomType","target","tags","includes","ACTIVITY_TAG","ONE_ON_ONE","SPACE_TYPE","DIRECT","GROUP","roomId","ROOM","id","personId","personEmail","emailAddress","entryEmail","files","MESSAGE","text","object","displayName","length","e","logger","error","message","create","key","file","warn","reduce","type","options","method","service","resource","request","res","body","get","items","list","qs","Page","remove","statusCode","undefined"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;AAOA;;;;AAXA;;;;AAiBA,IAAMA,QAAQC,QAAQ,OAAR,EAAiB,UAAjB,CAAd;;AAEA;;;;;;;;;;;;;;AAcA;;;;;;;;AAQA,IAAMC,WAAWC,uBAAYC,MAAZ,CAAmB;AAClC;;;;;AAKAC,YANkC,wBAMd;AAAA,sCAANC,IAAM;AAANA,UAAM;AAAA;;AAClB,yBAAcH,uBAAYI,SAAZ,CAAsBF,UAApC,EAAgD,IAAhD,EAAsDC,IAAtD;AACD,GARiC;;;AAUlC;;;;AAIAE,QAdkC,oBAczB;AAAA;;AACP;AACA,WAAO,iCAAoB,KAAKC,KAAzB,EACLC,kBAAUC,QAAV,CAAmBC,QAAnB,CAA4BC,QADvB,EAEJC,IAFI,CAEC,UAACC,QAAD,EAAc;AAClB,YAAKC,aAAL,GAAqBD,QAArB;;AAEA;AACA,aAAO,MAAKN,KAAL,CAAWQ,QAAX,CAAoBC,OAApB,CAA4BC,OAA5B,GAAsCL,IAAtC,CAA2C,YAAM;AACtD,cAAKM,QAAL,CAAc,MAAKX,KAAL,CAAWQ,QAAX,CAAoBC,OAAlC,EACER,kBAAUW,QAAV,CAAmBC,cADrB,EAEE,UAACC,KAAD;AAAA,iBAAW,MAAKC,eAAL,CAAqBD,KAArB,CAAX;AAAA,SAFF;AAGD,OAJM,CAAP;AAKD,KAXI,CAAP;AAYD,GA5BiC;;;AA8BlC;;;;;AAKAC,iBAnCkC,2BAmClBD,KAnCkB,EAmCX;AAAA,QACdE,QADc,GACFF,MAAMG,IADJ,CACdD,QADc;;AAGrB;;AACA,YAAQA,SAASE,IAAjB;AACE,WAAKjB,kBAAUW,QAAV,CAAmBO,aAAnB,CAAiCC,KAAtC;AACA,WAAKnB,kBAAUW,QAAV,CAAmBO,aAAnB,CAAiCE,IAAtC;AACE,YAAMC,eAAe,KAAKC,eAAL,CAAqBP,QAArB,EAA+Bf,kBAAUC,QAAV,CAAmBsB,UAAnB,CAA8BC,OAA7D,CAArB;;AAEA,YAAIH,YAAJ,EAAkB;AAChB/B,6DACI,yBAAe+B,YAAf,CADJ;AAEA,eAAKI,OAAL,CAAazB,kBAAUC,QAAV,CAAmBsB,UAAnB,CAA8BC,OAA3C,EAAoDH,YAApD;AACD;AACD;;AAEF,WAAKrB,kBAAUW,QAAV,CAAmBO,aAAnB,CAAiCQ,MAAtC;AACE,YAAMC,eAAe,KAAKL,eAAL,CAAqBP,QAArB,EAA+Bf,kBAAUC,QAAV,CAAmBsB,UAAnB,CAA8BK,OAA7D,CAArB;;AAEA,YAAID,YAAJ,EAAkB;AAChBrC,6DACI,yBAAeqC,YAAf,CADJ;AAEA,eAAKF,OAAL,CAAazB,kBAAUC,QAAV,CAAmBsB,UAAnB,CAA8BK,OAA3C,EAAoDD,YAApD;AACD;AACD;;AAEF;AAAS;AACP;AACD;AAxBH;AA0BD,GAjEiC;;;AAmElC;;;;;;;AAOAL,iBA1EkC,2BA0ElBP,QA1EkB,EA0ERF,KA1EQ,EA0ED;AAC/B,QAAI;AACF,UAAMgB,WAAW,yBAAU,KAAKvB,aAAf,CAAjB;;AAEAuB,eAAShB,KAAT,GAAiBA,KAAjB;AACAgB,eAASb,IAAT,CAAcc,OAAd,GAAwBf,SAASgB,SAAjC;AACAF,eAASG,OAAT,GAAmB,8BAAiBC,mBAAWC,MAA5B,EAAoCnB,SAASoB,KAAT,CAAeC,SAAnD,CAAnB;AACAP,eAASb,IAAT,CAAcqB,QAAd,GACEtB,SAASuB,MAAT,CAAgBC,IAAhB,CAAqBC,QAArB,CAA8BxC,kBAAUW,QAAV,CAAmB8B,YAAnB,CAAgCC,UAA9D,IACE1C,kBAAUC,QAAV,CAAmB0C,UAAnB,CAA8BC,MADhC,GAEE5C,kBAAUC,QAAV,CAAmB0C,UAAnB,CAA8BE,KAHlC;AAIAhB,eAASb,IAAT,CAAc8B,MAAd,GACE,8BAAiBb,mBAAWc,IAA5B,EAAkChC,SAASuB,MAAT,CAAgBU,EAAlD,CADF;AAEAnB,eAASb,IAAT,CAAciC,QAAd,GACE,8BAAiBhB,mBAAWC,MAA5B,EAAoCnB,SAASoB,KAAT,CAAeC,SAAnD,CADF;AAEAP,eAASb,IAAT,CAAckC,WAAd,GACEnC,SAASoB,KAAT,CAAegB,YAAf,IAA+BpC,SAASoB,KAAT,CAAeiB,UADhD;;AAGA,UAAIvC,UAAUb,kBAAUC,QAAV,CAAmBsB,UAAnB,CAA8BK,OAA5C,EAAqD;AACnD,YAAMyB,QAAQ,2BAActC,QAAd,CAAd;;AAEAc,iBAASb,IAAT,CAAcgC,EAAd,GAAmB,8BAAiBf,mBAAWqB,OAA5B,EAAqCvC,SAASiC,EAA9C,CAAnB;AACAnB,iBAASb,IAAT,CAAcuC,IAAd,GAAqBxC,SAASyC,MAAT,CAAgBC,WAArC;AACA,YAAIJ,MAAMK,MAAV,EAAkB;AAChB7B,mBAASb,IAAT,CAAcqC,KAAd,GAAsBA,KAAtB;AACD;AACF,OARD,MASK;AACHxB,iBAASb,IAAT,CAAcgC,EAAd,GACE,8BAAiBf,mBAAWqB,OAA5B,EAAqCvC,SAASyC,MAAT,CAAgBR,EAArD,CADF;AAED;;AAED,aAAOnB,QAAP;AACD,KAhCD,CAiCA,OAAO8B,CAAP,EAAU;AACR,WAAK5D,KAAL,CAAW6D,MAAX,CAAkBC,KAAlB,8EACyBhD,KADzB,gBACyC8C,EAAEG,OAD3C;;AAGA,aAAO,IAAP;AACD;AACF,GAlHiC;;;AAoHlC;;;;;;;;;;;;;;;;;;;;;;;;;AAyBAC,QA7IkC,kBA6I3BD,OA7I2B,EA6IlB;AACd,QAAIE,MAAM,MAAV;;AAEA,QAAIF,QAAQG,IAAZ,EAAkB;AAChB,WAAKL,MAAL,CAAYM,IAAZ,CAAiB,iFAAjB;AACAJ,cAAQT,KAAR,GAAgB,CAACS,QAAQG,IAAT,CAAhB;AACA,oCAAuBH,OAAvB,EAAgC,MAAhC;AACD;;AAED,QAAI,uBAAQA,QAAQT,KAAhB,KAA0BS,QAAQT,KAAR,CAAcc,MAAd,CAAqB,UAACC,IAAD,EAAOH,IAAP;AAAA,aAAgBG,QAAQ,OAAOH,IAAP,KAAgB,QAAxC;AAAA,KAArB,EAAuE,KAAvE,CAA9B,EAA6G;AAC3GD,YAAM,UAAN;AACD;;AAED,QAAMK;AACJC,cAAQ,MADJ;AAEJC,eAAS,OAFL;AAGJC,gBAAU;AAHN,OAIHR,GAJG,EAIGF,OAJH,CAAN;;AAOA,WAAO,KAAKW,OAAL,CAAaJ,OAAb,EACJjE,IADI,CACC,UAACsE,GAAD;AAAA,aAASA,IAAIC,IAAb;AAAA,KADD,CAAP;AAED,GAnKiC;;;AAqKlC;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BAC,KA/LkC,eA+L9Bd,OA/L8B,EA+LrB;AACX,QAAMd,KAAKc,QAAQd,EAAR,IAAcc,OAAzB;;AAEA,WAAO,KAAKW,OAAL,CAAa;AAClBF,eAAS,OADS;AAElBC,8BAAsBxB;AAFJ,KAAb,EAIJ5C,IAJI,CAIC,UAACsE,GAAD;AAAA,aAASA,IAAIC,IAAJ,CAASE,KAAT,IAAkBH,IAAIC,IAA/B;AAAA,KAJD,CAAP;AAKD,GAvMiC;;;AAyMlC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCAG,MAhPkC,gBAgP7BT,OAhP6B,EAgPpB;AAAA;;AACZ,WAAO,KAAKI,OAAL,CAAa;AAClBF,eAAS,OADS;AAElBC,gBAAU,UAFQ;AAGlBO,UAAIV;AAHc,KAAb,EAKJjE,IALI,CAKC,UAACsE,GAAD;AAAA,aAAS,IAAIM,eAAJ,CAASN,GAAT,EAAc,OAAK3E,KAAnB,CAAT;AAAA,KALD,CAAP;AAMD,GAvPiC;;;AAyPlC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCAkF,QAjSkC,kBAiS3BnB,OAjS2B,EAiSlB;AACd,QAAMd,KAAKc,QAAQd,EAAR,IAAcc,OAAzB;;AAEA,WAAO,KAAKW,OAAL,CAAa;AAClBH,cAAQ,QADU;AAElBC,eAAS,OAFS;AAGlBC,8BAAsBxB;AAHJ,KAAb,EAKJ5C,IALI,CAKC,UAACsE,GAAD,EAAS;AACb;AACA;AACA,UAAIA,IAAIQ,UAAJ,KAAmB,GAAvB,EAA4B;AAC1B,eAAOC,SAAP;AACD;;AAED,aAAOT,IAAIC,IAAX;AACD,KAbI,CAAP;AAcD,GAlTiC;AAAA;AAAA,CAAnB,CAAjB;;kBAqTenF,Q","file":"messages.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {\n  SDK_EVENT,\n  createEventEnvelope,\n  constructHydraId,\n  getHydraFiles,\n  hydraTypes\n} from '@webex/common';\nimport {\n  Page,\n  SparkPlugin\n} from '@webex/webex-core';\nimport {isArray, cloneDeep} from 'lodash';\n\nconst debug = require('debug')('messages');\n\n/**\n * @typedef {Object} MessageObject\n * @property {string} id - (server generated) Unique identifier for the message\n * @property {string} personId - The ID for the author of the messasge\n * @property {email} personEmail - The email for the author of the messasge\n * @property {string} roomId - The ID for the room of the message\n * @property {string} text - The message posted to the room in plain text\n * @property {string} markdown - The message posted to the room in markdown\n * @property {Array<string>} files - The source URL(s) for the message attachment(s).\n * See the {@link https://developer.webex.com/attachments.html|Message Attachments}\n * Guide for a list of supported media types.\n * @property {isoDate} created - (server generated) The date and time that the message was created\n */\n\n/**\n * Messages are how people communicate in rooms. Each message timestamped and\n * represented in Spark as a distinct block of content. Messages can contain\n * plain text and a single file attachment. See the\n * {@link https://developer.webex.com/attachments.html|Message Attachments} Guide\n * for a list of supported media types.\n * @class\n */\nconst Messages = SparkPlugin.extend({\n  /**\n   * Initializer\n   * @param  {...any} args\n   * @returns {undefined}\n   */\n  initialize(...args) {\n    Reflect.apply(SparkPlugin.prototype.initialize, this, args);\n  },\n\n  /**\n   * Connect to the web socket to listen to incoming messages.\n   * @returns {Promise}\n   */\n  listen() {\n    // Create a common envelope that we will wrap all events in\n    return createEventEnvelope(this.spark,\n      SDK_EVENT.EXTERNAL.RESOURCE.MESSAGES)\n      .then((envelope) => {\n        this.eventEnvelope = envelope;\n\n        // Register to listen to events\n        return this.spark.internal.mercury.connect().then(() => {\n          this.listenTo(this.spark.internal.mercury,\n            SDK_EVENT.INTERNAL.TEAMS_ACTIVITY,\n            (event) => this.onWebexApiEvent(event));\n        });\n      });\n  },\n\n  /**\n   * Trigger a \"messages\" event.\n   * @param {Object} event\n   * @returns {undefined}\n   */\n  onWebexApiEvent(event) {\n    const {activity} = event.data;\n\n    /* eslint-disable no-case-declarations */\n    switch (activity.verb) {\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.SHARE:\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.POST:\n        const createdEvent = this.getMessageEvent(activity, SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED);\n\n        if (createdEvent) {\n          debug(`messages \"created\" payload: \\\n            ${JSON.stringify(createdEvent)}`);\n          this.trigger(SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED, createdEvent);\n        }\n        break;\n\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.DELETE:\n        const deletedEvent = this.getMessageEvent(activity, SDK_EVENT.EXTERNAL.EVENT_TYPE.DELETED);\n\n        if (deletedEvent) {\n          debug(`messages \"deleted\" payload: \\\n            ${JSON.stringify(deletedEvent)}`);\n          this.trigger(SDK_EVENT.EXTERNAL.EVENT_TYPE.DELETED, deletedEvent);\n        }\n        break;\n\n      default: {\n        break;\n      }\n    }\n  },\n\n  /**\n   * Constructs the data object for an event on the messages resource,\n   * adhering to Hydra's Webehook data structure messages.\n   * @param {Object} activity from mercury\n   * @param {Object} event type of \"webhook\" event\n   * @returns {Object} constructed event\n   */\n  getMessageEvent(activity, event) {\n    try {\n      const sdkEvent = cloneDeep(this.eventEnvelope);\n\n      sdkEvent.event = event;\n      sdkEvent.data.created = activity.published;\n      sdkEvent.actorId = constructHydraId(hydraTypes.PEOPLE, activity.actor.entryUUID);\n      sdkEvent.data.roomType =\n        activity.target.tags.includes(SDK_EVENT.INTERNAL.ACTIVITY_TAG.ONE_ON_ONE) ?\n          SDK_EVENT.EXTERNAL.SPACE_TYPE.DIRECT :\n          SDK_EVENT.EXTERNAL.SPACE_TYPE.GROUP;\n      sdkEvent.data.roomId =\n        constructHydraId(hydraTypes.ROOM, activity.target.id);\n      sdkEvent.data.personId =\n        constructHydraId(hydraTypes.PEOPLE, activity.actor.entryUUID);\n      sdkEvent.data.personEmail =\n        activity.actor.emailAddress || activity.actor.entryEmail;\n\n      if (event !== SDK_EVENT.EXTERNAL.EVENT_TYPE.DELETED) {\n        const files = getHydraFiles(activity);\n\n        sdkEvent.data.id = constructHydraId(hydraTypes.MESSAGE, activity.id);\n        sdkEvent.data.text = activity.object.displayName;\n        if (files.length) {\n          sdkEvent.data.files = files;\n        }\n      }\n      else {\n        sdkEvent.data.id =\n          constructHydraId(hydraTypes.MESSAGE, activity.object.id);\n      }\n\n      return sdkEvent;\n    }\n    catch (e) {\n      this.spark.logger.error(`Unable to generate SDK event from mercury \\\n'socket activity for message:${event} event: ${e.message}`);\n\n      return null;\n    }\n  },\n\n  /**\n   * Post a new message and/or media content into a room.\n   * @instance\n   * @memberof Messages\n   * @param {MessageObject} message\n   * @returns {Promise<MessageObject>}\n   * @example\n   * ciscospark.rooms.create({title: 'Create Message Example'})\n   *   .then(function(room) {\n   *     return ciscospark.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(message) {\n   *     var assert = require('assert');\n   *     assert(message.id);\n   *     assert(message.personId);\n   *     assert(message.personEmail);\n   *     assert(message.roomId);\n   *     assert(message.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  create(message) {\n    let key = 'body';\n\n    if (message.file) {\n      this.logger.warn('Supplying a single `file` property is deprecated; please supply a `files` array');\n      message.files = [message.file];\n      Reflect.deleteProperty(message, 'file');\n    }\n\n    if (isArray(message.files) && message.files.reduce((type, file) => type || typeof file !== 'string', false)) {\n      key = 'formData';\n    }\n\n    const options = {\n      method: 'POST',\n      service: 'hydra',\n      resource: 'messages',\n      [key]: message\n    };\n\n    return this.request(options)\n      .then((res) => res.body);\n  },\n\n  /**\n   * Returns a single message.\n   * @instance\n   * @memberof Messages\n   * @param {RoomObject|string} message\n   * @returns {Promise<MessageObject>}\n   * @example\n   * var message;\n   * ciscospark.rooms.create({title: 'Get Message Example'})\n   *   .then(function(room) {\n   *     return ciscospark.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message = m;\n   *     return ciscospark.messages.get(message.id);\n   *   })\n   *   .then(function(message2) {\n   *     var assert = require('assert');\n   *     assert.deepEqual(message2, message);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get(message) {\n    const id = message.id || message;\n\n    return this.request({\n      service: 'hydra',\n      resource: `messages/${id}`\n    })\n      .then((res) => res.body.items || res.body);\n  },\n\n  /**\n   * Returns a list of messages. In most cases the results will only contain\n   * messages posted in rooms that the authentiated user is a member of.\n   * @instance\n   * @memberof Messages\n   * @param {Object} options\n   * @param {string} options.roomId\n   * @param {number} options.max\n   * @returns {Promise<Page<MessageObject>>}\n   * @example\n   * var message1, message2, room;\n   * ciscospark.rooms.create({title: 'List Messages Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return ciscospark.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message1 = m;\n   *     return ciscospark.messages.create({\n   *       text: 'How are you?',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message2 = m;\n   *     return ciscospark.messages.list({roomId: room.id});\n   *   })\n   *   .then(function(messages) {\n   *     var assert = require('assert');\n   *     assert.equal(messages.length, 2);\n   *     assert.equal(messages.items[0].id, message2.id);\n   *     assert.equal(messages.items[1].id, message1.id);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  list(options) {\n    return this.request({\n      service: 'hydra',\n      resource: 'messages',\n      qs: options\n    })\n      .then((res) => new Page(res, this.spark));\n  },\n\n  /**\n   * Deletes a single message. Deleting a message will notify all members of the\n   * room that the authenticated user deleted the message. Generally, users can\n   * only delete their own messages except for the case of Moderated Rooms and\n   * Org Administrators.\n   * @instance\n   * @memberof Messages\n   * @param {MessageObject|uuid} message\n   * @returns {Promise}}\n   * @example\n   * var message1, room;\n   * ciscospark.rooms.create({title: 'Messages Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return ciscospark.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message1 = m;\n   *     return ciscospark.messages.create({\n   *       text: 'How are you?',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function() {\n   *     return ciscospark.messages.remove(message1);\n   *   })\n   *   .then(function() {\n   *     return ciscospark.messages.list({roomId: room.id});\n   *   })\n   *   .then(function(messages) {\n   *     var assert = require('assert');\n   *     assert.equal(messages.items.length, 1);\n   *     assert(messages.items[0].id !== message1.id);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  remove(message) {\n    const id = message.id || message;\n\n    return this.request({\n      method: 'DELETE',\n      service: 'hydra',\n      resource: `messages/${id}`\n    })\n      .then((res) => {\n        // Firefox has some issues with 204s and/or DELETE. This should move to\n        // http-core\n        if (res.statusCode === 204) {\n          return undefined;\n        }\n\n        return res.body;\n      });\n  }\n});\n\nexport default Messages;\n"]}